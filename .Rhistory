T <- length(xm.source)
xm <- xm.source[1:(T-4)] #supprime les 4 dernieres valeurs
# Créer un graphe avec des dates en abscisse avec un pas de 12 mois
plot(df$value ~ df$date, xaxt = "n")
# Créer un graphe avec des dates en abscisse avec un pas de 12 mois
plot(data$value ~ data$date, xaxt = "n")
# Créer un graphe avec des dates en abscisse avec un pas de 12 mois
plot(data$valeur ~ data$Date, xaxt = "n")
# Créer un graphe avec des dates en abscisse avec un pas de 12 mois
plot(data$Valeur ~ data$Date, xaxt = "n")
dev.off()
# Créer un graphe avec des dates en abscisse avec un pas de 12 mois
plot(data$Valeur ~ data$Date, xaxt = "n")
####Graphique####
plot(xm, xaxt="n")
axis(side=1,at=data$Date)
####Graphique####
plot(xm, xaxt="n")
axis(side=1,at=data$Date)
library(zoo) #format de serie temporelle pratique et facile d'utilisation (mais plus volumineux)
library(tseries) #diverses fonctions sur les series temporelles
####set-up####
path <- "/Users/ludovic/Desktop/ENSAE/S2/series/serie_temp"
setwd(path) #definit l'espace de travail (working directory ou "wd")
getwd() #affiche le wd
list.files() #liste les elements du wd
####import####
datafile <- "input/valeurs_serie.csv" #definit le fichier de donnees
data <- read.csv(datafile,sep = ";") #importe un fichier .csv dans un objet de classe data.frame
data <- data[nrow(data):1,]
# Convertir la colonne "date" en format date
#Convertir les valeurs en zoo
xm.source <- zoo(data[[2]])# convertit le premiers element de data en serie temporelle de type "zoo"
T <- length(xm.source)
xm <- xm.source[1:(T-4)] #supprime les 4 dernieres valeurs
####Graphique####
plot(xm, xaxt="n")
axis(side=1,at=data$Date)
####autocorrélation####
par(mfrow=c(1,2))
acf(xm); pacf(xm)
dev.off()
####detrend#####
y <- xm - mean(xm)
plot(y)
par(mfrow=c(1,2))
acf(y,24);pacf(y,24)
library(zoo) #format de serie temporelle pratique et facile d'utilisation (mais plus volumineux)
library(tseries) #diverses fonctions sur les series temporelles
####set-up####
path <- "/Users/ludovic/Desktop/ENSAE/S2/series/serie_temp"
setwd(path) #definit l'espace de travail (working directory ou "wd")
getwd() #affiche le wd
list.files() #liste les elements du wd
####import####
datafile <- "input/valeurs_serie.csv" #definit le fichier de donnees
data <- read.csv(datafile,sep = ";") #importe un fichier .csv dans un objet de classe data.frame
data <- data[nrow(data):1,]
# Convertir la colonne "date" en format date
#Convertir les valeurs en zoo
xm.source <- zoo(data[[2]])# convertit le premiers element de data en serie temporelle de type "zoo"
T <- length(xm.source)
xm <- xm.source[1:(T-4)] #supprime les 4 dernieres valeurs
####Graphique####
plot(xm, xaxt="n")
####autocorrélation####
par(mfrow=c(1,2))
acf(xm); pacf(xm)
dev.off()
####detrend#####
y <- xm - mean(xm)
plot(y)
par(mfrow=c(1,2))
acf(y,24);pacf(y,24)
library(zoo) #format de serie temporelle pratique et facile d'utilisation (mais plus volumineux)
library(tseries) #diverses fonctions sur les series temporelles
####set-up####
path <- "/Users/ludovic/Desktop/ENSAE/S2/series/serie_temp"
setwd(path) #definit l'espace de travail (working directory ou "wd")
getwd() #affiche le wd
list.files() #liste les elements du wd
####import####
datafile <- "input/valeurs_serie.csv" #definit le fichier de donnees
data <- read.csv(datafile,sep = ";") #importe un fichier .csv dans un objet de classe data.frame
data <- data[nrow(data):1,]
# Convertir la colonne "date" en format date
#Convertir les valeurs en zoo
xm.source <- zoo(data[[2]])# convertit le premiers element de data en serie temporelle de type "zoo"
T <- length(xm.source)
xm <- xm.source[1:(T-4)] #supprime les 4 dernieres valeurs
####Graphique####
plot(xm, xaxt="n")
####autocorrélation####
par(mfrow=c(1,2))
acf(xm); pacf(xm)
dev.off()
####detrend#####
y <- xm - mean(xm)
plot(y)
par(mfrow=c(1,2))
acf(y,24);pacf(y,24)
rm(list = ls())
rm(list = ls())
library(zoo) #format de serie temporelle pratique et facile d'utilisation (mais plus volumineux)
library(tseries) #diverses fonctions sur les series temporelles
####set-up####
path <- "/Users/ludovic/Desktop/ENSAE/S2/series/serie_temp"
setwd(path) #definit l'espace de travail (working directory ou "wd")
getwd() #affiche le wd
list.files() #liste les elements du wd
####import####
datafile <- "input/valeurs_serie.csv" #definit le fichier de donnees
data <- read.csv(datafile,sep = ";") #importe un fichier .csv dans un objet de classe data.frame
data <- data[nrow(data):1,]
# Convertir la colonne "date" en format date
#Convertir les valeurs en zoo
xm.source <- zoo(data[[2]])# convertit le premiers element de data en serie temporelle de type "zoo"
T <- length(xm.source)
xm <- xm.source[1:(T-4)] #supprime les 4 dernieres valeurs
####Graphique####
plot(xm, xaxt="n")
####autocorrélation####
par(mfrow=c(1,2))
acf(xm); pacf(xm)
dev.off()
####detrend#####
y <- xm - mean(xm)
plot(y)
par(mfrow=c(1,2))
acf(y,24);pacf(y,24)
acf(y,30);pacf(y,30)
plot(xm)
plot(y)
mean(xm)
require(zoo) #format de serie temporelle pratique et facile d'utilisation (mais plus volumineux)
require(tseries) #diverses fonctions sur les series temporelles
#### Q1 ####
#path <- "C:/Users/csaurel/Desktop/THESE/Cours_Ensae/STL"
#setwd(path) #definit l'espace de travail (working directory ou "wd")
#getwd() #affiche le wd
#list.files() #liste les elements du wd
#datafile <- "Donnees1.csv" #definit le fichier de donnees
data1 <- read.csv("/Users/ludovic/Desktop/Donnees1.csv",sep=";") #importe un fichier .csv dans un objet de classe data.frame
xm_source <- zoo(data[[1]]) #convertit le premier element de data en serie temporelle de type "zoo"
T <- length(xm.source)
xm <- xm.source[1:(T-4)] #supprime les 4 dernieres valeurs
#### Q2 ####
plot(xm) #
plot(xm, xaxt="n") #
axis(side=1,at=seq(0,196,12)) #
acf(xm) #
#
desaison <- xm-lag(xm,-12) #
par(mfrow=c(1,2)) #
plot(desaison)
acf(desaison)
#### Q3 ####
acf(desaison) #
pacf(desaison) #
#
#### Q4 ####
dev.off() #reinitialise les parametres des representations graphiques
plot(desaison)
#
pp.test(desaison) #
#
#### Q5 ####
acf(desaison); pacf(desaison)
axis(side=1,at=seq(0,25))
#
#
y <- desaison - mean(desaison) #
par(mfrow=c(1,2))
acf(y,24);pacf(y,24)
xm_source <- zoo(data[[1]]) #convertit le premier element de data en serie temporelle de type "zoo"
require(zoo) #format de serie temporelle pratique et facile d'utilisation (mais plus volumineux)
require(tseries) #diverses fonctions sur les series temporelles
#### Q1 ####
#path <- "C:/Users/csaurel/Desktop/THESE/Cours_Ensae/STL"
#setwd(path) #definit l'espace de travail (working directory ou "wd")
#getwd() #affiche le wd
#list.files() #liste les elements du wd
#datafile <- "Donnees1.csv" #definit le fichier de donnees
data <- read.csv("/Users/ludovic/Desktop/Donnees1.csv",sep=";") #importe un fichier .csv dans un objet de classe data.frame
xm_source <- zoo(data[[1]]) #convertit le premier element de data en serie temporelle de type "zoo"
T <- length(xm.source)
xm <- xm.source[1:(T-4)] #supprime les 4 dernieres valeurs
#### Q2 ####
plot(xm) #
plot(xm, xaxt="n") #
axis(side=1,at=seq(0,196,12)) #
acf(xm) #
#
desaison <- xm-lag(xm,-12) #
par(mfrow=c(1,2)) #
plot(desaison)
acf(desaison)
#### Q3 ####
acf(desaison) #
pacf(desaison) #
#
#### Q4 ####
dev.off() #reinitialise les parametres des representations graphiques
plot(desaison)
#
pp.test(desaison) #
#
#### Q5 ####
acf(desaison); pacf(desaison)
axis(side=1,at=seq(0,25))
#
#
y <- desaison - mean(desaison) #
par(mfrow=c(1,2))
acf(y,24);pacf(y,24)
T <- length(xm.source)
require(zoo) #format de serie temporelle pratique et facile d'utilisation (mais plus volumineux)
require(tseries) #diverses fonctions sur les series temporelles
#### Q1 ####
#path <- "C:/Users/csaurel/Desktop/THESE/Cours_Ensae/STL"
#setwd(path) #definit l'espace de travail (working directory ou "wd")
#getwd() #affiche le wd
#list.files() #liste les elements du wd
#datafile <- "Donnees1.csv" #definit le fichier de donnees
data <- read.csv("/Users/ludovic/Desktop/Donnees1.csv",sep=";") #importe un fichier .csv dans un objet de classe data.frame
xm.source <- zoo(data[[1]]) #convertit le premier element de data en serie temporelle de type "zoo"
T <- length(xm.source)
xm <- xm.source[1:(T-4)] #supprime les 4 dernieres valeurs
#### Q2 ####
plot(xm) #
plot(xm, xaxt="n") #
axis(side=1,at=seq(0,196,12)) #
acf(xm) #
#
desaison <- xm-lag(xm,-12) #
par(mfrow=c(1,2)) #
plot(desaison)
acf(desaison)
#### Q3 ####
acf(desaison) #
pacf(desaison) #
#
#### Q4 ####
dev.off() #reinitialise les parametres des representations graphiques
plot(desaison)
#
pp.test(desaison) #
#
#### Q5 ####
acf(desaison); pacf(desaison)
axis(side=1,at=seq(0,25))
#
#
y <- desaison - mean(desaison) #
par(mfrow=c(1,2))
acf(y,24);pacf(y,24)
plot(y)
#
#
plot(desaison)
rm(list = ls())
library(zoo) #format de serie temporelle pratique et facile d'utilisation (mais plus volumineux)
library(tseries) #diverses fonctions sur les series temporelles
####set-up####
path <- "/Users/ludovic/Desktop/ENSAE/S2/series/serie_temp"
setwd(path) #definit l'espace de travail (working directory ou "wd")
getwd() #affiche le wd
list.files() #liste les elements du wd
####import####
datafile <- "input/valeurs_serie.csv" #definit le fichier de donnees
data <- read.csv(datafile,sep = ";") #importe un fichier .csv dans un objet de classe data.frame
data <- data[nrow(data):1,]
# Convertir la colonne "date" en format date
#Convertir les valeurs en zoo
xm.source <- zoo(data[[2]])# convertit le premiers element de data en serie temporelle de type "zoo"
T <- length(xm.source)
xm <- xm.source[1:(T-4)] #supprime les 4 dernieres valeurs
####Graphique####
plot(xm, xaxt="n")
####autocorrélation####
par(mfrow=c(1,2))
acf(xm); pacf(xm)
dev.off()
####detrend#####
y <- xm - mean(xm)
plot(xm)
plot(y)
par(mfrow=c(1,2))
acf(y,30);pacf(y,30)
arima(y,c(3,0,2))
par(mfrow=c(1,2))
acf(y,30);pacf(y,30)
arima(y,c(3,0,2))
arima302 <- arima(y,c(3,0,2))
rm(list = ls())
library(zoo) #format de serie temporelle pratique et facile d'utilisation (mais plus volumineux)
library(tseries) #diverses fonctions sur les series temporelles
####set-up####
path <- "/Users/ludovic/Desktop/ENSAE/S2/series/serie_temp"
setwd(path) #definit l'espace de travail (working directory ou "wd")
getwd() #affiche le wd
list.files() #liste les elements du wd
####import####
datafile <- "input/valeurs_serie.csv" #definit le fichier de donnees
data <- read.csv(datafile,sep = ";") #importe un fichier .csv dans un objet de classe data.frame
data <- data[nrow(data):1,]
data$Date <- seq(as.Date("1990-01-01"), as.Date("2023-01-01"), by = "month")
#Convertir les valeurs en zoo
xm.source <- zoo(data[[2]]) # convertit le premiers element de data en serie temporelle de type "zoo"
T <- length(xm.source)
xm <- xm.source[1:(T-4)] #supprime les 4 dernieres valeurs
library(ggplot2)
ggplot(data, aes(x = x, y = y)) +
geom_point()
ggplot(data, aes(x = data$Valeur, y = data$Date)) +
geom_point()
ggplot(data, aes(y = data$Valeur, x = data$Date)) +
geom_point()
ggplot(data, aes(y = data$Valeur, x = data$Date)) +
geom_line()
plot(xm, xaxt="n")
rm(list = ls())
library(zoo) #format de serie temporelle pratique et facile d'utilisation (mais plus volumineux)
library(tseries) #diverses fonctions sur les series temporelles
library(ggplot2)
####set-up####
path <- "/Users/ludovic/Desktop/ENSAE/S2/series/serie_temp"
setwd(path) #definit l'espace de travail (working directory ou "wd")
getwd() #affiche le wd
list.files() #liste les elements du wd
####import####
datafile <- "input/valeurs_serie.csv" #definit le fichier de donnees
data <- read.csv(datafile,sep = ";") #importe un fichier .csv dans un objet de classe data.frame
#data <- data[nrow(data):1,]
#data$Date <- seq(as.Date("1990-01-01"), as.Date("2023-01-01"), by = "month")
# Convertir la colonne "date" en format date
data<-data[-c((T-3), (T-2), (T-1), T),]
data <- data[nrow(data):1,]
data$Date <- seq(as.Date("1990-05-01"), as.Date("2023-01-01"), by = "month") # Convertir la colonne "date" en format date
xm.source <- zoo(data[[2]]) # convertit le premiers element de data en serie temporelle de type "zoo"
T <- length(xm.source)
xm<-xm.source
ggplot(data, aes(y = xm, x = Date)) +
geom_line()
rm(list = ls())
library(zoo) #format de serie temporelle pratique et facile d'utilisation (mais plus volumineux)
library(tseries) #diverses fonctions sur les series temporelles
library(ggplot2)
####set-up####
path <- "/Users/ludovic/Desktop/ENSAE/S2/series/serie_temp"
setwd(path) #definit l'espace de travail (working directory ou "wd")
getwd() #affiche le wd
list.files() #liste les elements du wd
####import####
datafile <- "input/valeurs_serie.csv" #definit le fichier de donnees
data <- read.csv(datafile,sep = ";") #importe un fichier .csv dans un objet de classe data.frame
#data <- data[nrow(data):1,]
#data$Date <- seq(as.Date("1990-01-01"), as.Date("2023-01-01"), by = "month")
# Convertir la colonne "date" en format date
T<-length(data$Date)
data<-data[-c((T-3), (T-2), (T-1), T),]
data <- data[nrow(data):1,]
data$Date <- seq(as.Date("1990-05-01"), as.Date("2023-01-01"), by = "month") # Convertir la colonne "date" en format date
xm.source <- zoo(data[[2]]) # convertit le premiers element de data en serie temporelle de type "zoo"
T <- length(xm.source)
xm<-xm.source
ggplot(data, aes(y = xm, x = Date)) +
geom_line()
rm(list = ls())
library(zoo) #format de serie temporelle pratique et facile d'utilisation (mais plus volumineux)
library(tseries) #diverses fonctions sur les series temporelles
library(ggplot2)
####set-up####
path <- "/Users/ludovic/Desktop/ENSAE/S2/series/serie_temp"
setwd(path) #definit l'espace de travail (working directory ou "wd")
getwd() #affiche le wd
list.files() #liste les elements du wd
####import####
datafile <- "input/valeurs_serie.csv" #definit le fichier de donnees
data <- read.csv(datafile,sep = ";") #importe un fichier .csv dans un objet de classe data.frame
####representation de la série####
# On enlève les 4 dernière valeurs en vue de la prévision
T<-length(data$Date)
data <- data[nrow(data):1,]
data<-data[c((T-3), (T-2), (T-1), T),]
# Convertir la colonne "date" en format date et création d'une série de type zoo
data$Date <- seq(as.Date("1990-05-01"), as.Date("2023-01-01"), by = "month") # Convertir la colonne "date" en format date
xm.source <- zoo(data[[2]]) # convertit le premiers element de data en serie temporelle de type "zoo"
T <- length(xm.source)
xm<-xm.source
# représentation graphique
ggplot(data, aes(y = xm, x = Date)) +
geom_line()
View(data)
rm(list = ls())
library(zoo) #format de serie temporelle pratique et facile d'utilisation (mais plus volumineux)
library(tseries) #diverses fonctions sur les series temporelles
library(ggplot2)
####set-up####
path <- "/Users/ludovic/Desktop/ENSAE/S2/series/serie_temp"
setwd(path) #definit l'espace de travail (working directory ou "wd")
getwd() #affiche le wd
list.files() #liste les elements du wd
####import####
datafile <- "input/valeurs_serie.csv" #definit le fichier de donnees
data <- read.csv(datafile,sep = ";") #importe un fichier .csv dans un objet de classe data.frame
####representation de la série####
# On enlève les 4 dernière valeurs en vue de la prévision
T<-length(data$Date)
data <- data[nrow(data):1,]
View(data)
rm(list = ls())
library(zoo) #format de serie temporelle pratique et facile d'utilisation (mais plus volumineux)
library(tseries) #diverses fonctions sur les series temporelles
library(ggplot2)
####set-up####
path <- "/Users/ludovic/Desktop/ENSAE/S2/series/serie_temp"
setwd(path) #definit l'espace de travail (working directory ou "wd")
getwd() #affiche le wd
list.files() #liste les elements du wd
####import####
datafile <- "input/valeurs_serie.csv" #definit le fichier de donnees
data <- read.csv(datafile,sep = ";") #importe un fichier .csv dans un objet de classe data.frame
data <- data[nrow(data):1,]
T<-length(data$Date)
data<-data[-c((T-3), (T-2), (T-1), T),]
data$Date <- seq(as.Date("1990-05-01"), as.Date("2023-01-01"), by = "month") # Convertir la colonne "date" en format date
xm.source <- zoo(data[[2]]) # convertit le premiers element de data en serie temporelle de type "zoo"
T <- length(xm.source)
xm<-xm.source
ggplot(data, aes(y = xm, x = Date)) +
geom_line()
rm(list = ls())
library(zoo) #format de serie temporelle pratique et facile d'utilisation (mais plus volumineux)
library(tseries) #diverses fonctions sur les series temporelles
library(ggplot2)
####set-up####
path <- "/Users/ludovic/Desktop/ENSAE/S2/series/serie_temp"
setwd(path) #definit l'espace de travail (working directory ou "wd")
getwd() #affiche le wd
list.files() #liste les elements du wd
####import####
datafile <- "input/valeurs_serie.csv" #definit le fichier de donnees
data <- read.csv(datafile,sep = ";") #importe un fichier .csv dans un objet de classe data.frame
data <- data[nrow(data):1,]
####representation de la série####
# On enlève les 4 dernière valeurs en vue de la prévision
T<-length(data$Date)
data<-data[-c((T-3), (T-2), (T-1), T),]
# Convertir la colonne "date" en format date et création d'une série de type zoo
data$Date <- seq(as.Date("1990-05-01"), as.Date("2023-01-01"), by = "month") # Convertir la colonne "date" en format date
xm <- zoo(data[[2]]) # convertit le premiers element de data en serie temporelle de type "zoo"
T <- length(xm.source)
# représentation graphique
ggplot(data, aes(y = xm, x = Date)) +
geom_line()
####autocorrélation####
par(mfrow=c(1,2))
acf(xm); pacf(xm)
dev.off()
y <- xm - mean(xm)
plot(xm)
plot(y)
par(mfrow=c(1,2))
rm(list = ls())
library(zoo) #format de serie temporelle pratique et facile d'utilisation (mais plus volumineux)
library(tseries) #diverses fonctions sur les series temporelles
library(ggplot2)
####set-up####
path <- "/Users/ludovic/Desktop/ENSAE/S2/series/serie_temp"
setwd(path) #definit l'espace de travail (working directory ou "wd")
getwd() #affiche le wd
list.files() #liste les elements du wd
####import####
datafile <- "input/valeurs_serie.csv" #definit le fichier de donnees
data <- read.csv(datafile,sep = ";") #importe un fichier .csv dans un objet de classe data.frame
data <- data[nrow(data):1,]
####representation de la série####
# On enlève les 4 dernière valeurs en vue de la prévision
T<-length(data$Date)
data<-data[-c((T-3), (T-2), (T-1), T),]
# Convertir la colonne "date" en format date et création d'une série de type zoo
data$Date <- seq(as.Date("1990-05-01"), as.Date("2023-01-01"), by = "month") # Convertir la colonne "date" en format date
xm <- zoo(data[[2]]) # convertit le premiers element de data en serie temporelle de type "zoo"
T <- length(xm.source)
# représentation graphique
ggplot(data, aes(y = xm, x = Date)) +
geom_line()
####autocorrélation####
par(mfrow=c(1,2))
acf(xm); pacf(xm)
dev.off()
####detrend#####
y <- xm - mean(xm)
par(mfrow=c(1,2))
plot(xm)
plot(y)
acf(y,30);pacf(y,30)
ggplot(data, aes(y = xm, x = Date)) +
geom_line()
summary(lm(xm ~ data$Date))
install.packages("fUnitRoots")
library(fUnitRoots)
summary(lm(xm ~ data$Date))
# require(fUnitRoots)
adf <- adfTest(spread, lag=0, type="ct")
# require(fUnitRoots)
adf <- adfTest(spread, lag=0, type="ct")
require(fUnitRoots)
install.packages("fUnitRoots")
library(fUnitRoots)
install.packages("gss")
